//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "jobs"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub job_id: Uuid,
    pub name: String,
    pub payload: Json,
    pub priority: i32,
    pub run_at: DateTimeWithTimeZone,
    pub created_at: DateTimeWithTimeZone,
    pub locked_at: Option<DateTimeWithTimeZone>,
    pub locked_by: Option<String>,
    pub context: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    JobId,
    Name,
    Payload,
    Priority,
    RunAt,
    CreatedAt,
    LockedAt,
    LockedBy,
    Context,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    JobId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::JobId => ColumnType::Uuid.def(),
            Self::Name => ColumnType::Text.def(),
            Self::Payload => ColumnType::JsonBinary.def(),
            Self::Priority => ColumnType::Integer.def(),
            Self::RunAt => ColumnType::TimestampWithTimeZone.def(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::LockedAt => ColumnType::TimestampWithTimeZone.def().null(),
            Self::LockedBy => ColumnType::Text.def().null(),
            Self::Context => ColumnType::Text.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
