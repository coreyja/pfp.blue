//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "oauth_sessions"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: Uuid,
    pub session_id: Uuid,
    pub did: String,
    pub redirect_uri: Option<String>,
    pub state: Option<String>,
    pub token_endpoint: String,
    pub created_at: i64,
    pub created_at_utc: DateTimeWithTimeZone,
    pub updated_at_utc: DateTimeWithTimeZone,
    pub encrypted_code_verifier: Option<String>,
    pub encrypted_code_challenge: Option<String>,
    pub encrypted_dpop_nonce: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    SessionId,
    Did,
    RedirectUri,
    State,
    TokenEndpoint,
    CreatedAt,
    CreatedAtUtc,
    UpdatedAtUtc,
    EncryptedCodeVerifier,
    EncryptedCodeChallenge,
    EncryptedDpopNonce,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::SessionId => ColumnType::Uuid.def().unique(),
            Self::Did => ColumnType::Text.def(),
            Self::RedirectUri => ColumnType::Text.def().null(),
            Self::State => ColumnType::Text.def().null(),
            Self::TokenEndpoint => ColumnType::Text.def(),
            Self::CreatedAt => ColumnType::BigInteger.def(),
            Self::CreatedAtUtc => ColumnType::TimestampWithTimeZone.def(),
            Self::UpdatedAtUtc => ColumnType::TimestampWithTimeZone.def(),
            Self::EncryptedCodeVerifier => ColumnType::Text.def().null(),
            Self::EncryptedCodeChallenge => ColumnType::Text.def().null(),
            Self::EncryptedDpopNonce => ColumnType::Text.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
