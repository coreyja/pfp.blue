//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "oauth_tokens"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: Uuid,
    pub did: String,
    pub access_token: String,
    pub token_type: String,
    pub expires_at: i64,
    pub refresh_token: Option<String>,
    pub scope: String,
    pub dpop_jkt: Option<String>,
    pub created_at_utc: DateTimeWithTimeZone,
    pub updated_at_utc: DateTimeWithTimeZone,
    pub user_id: Uuid,
    pub display_name: Option<String>,
    pub uuid_id: Uuid,
    pub handle: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Did,
    AccessToken,
    TokenType,
    ExpiresAt,
    RefreshToken,
    Scope,
    DpopJkt,
    CreatedAtUtc,
    UpdatedAtUtc,
    UserId,
    DisplayName,
    UuidId,
    Handle,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    ProfilePictureProgress,
    Sessions,
    Users,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::Did => ColumnType::Text.def().unique(),
            Self::AccessToken => ColumnType::Text.def(),
            Self::TokenType => ColumnType::Text.def(),
            Self::ExpiresAt => ColumnType::BigInteger.def(),
            Self::RefreshToken => ColumnType::Text.def().null(),
            Self::Scope => ColumnType::Text.def(),
            Self::DpopJkt => ColumnType::Text.def().null(),
            Self::CreatedAtUtc => ColumnType::TimestampWithTimeZone.def(),
            Self::UpdatedAtUtc => ColumnType::TimestampWithTimeZone.def(),
            Self::UserId => ColumnType::Uuid.def(),
            Self::DisplayName => ColumnType::Text.def().null(),
            Self::UuidId => ColumnType::Uuid.def().unique(),
            Self::Handle => ColumnType::Text.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::ProfilePictureProgress => {
                Entity::has_one(super::profile_picture_progress::Entity).into()
            }
            Self::Sessions => Entity::has_many(super::sessions::Entity).into(),
            Self::Users => Entity::belongs_to(super::users::Entity)
                .from(Column::UserId)
                .to(super::users::Column::Id)
                .into(),
        }
    }
}

impl Related<super::profile_picture_progress::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfilePictureProgress.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
