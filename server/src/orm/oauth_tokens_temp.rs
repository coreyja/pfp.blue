//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0



use sea_orm :: entity :: prelude :: * ;

# [derive (Copy , Clone , Default , Debug , DeriveEntity)] pub struct Entity ;

impl EntityName for Entity { fn table_name (& self) -> & str { "oauth_tokens_temp" } }

# [derive (Clone , Debug , PartialEq , DeriveModel , DeriveActiveModel , Eq)] pub struct Model { pub id : Option < Uuid > , pub did : Option < String > , pub access_token : Option < String > , pub token_type : Option < String > , pub expires_at : Option < i64 > , pub refresh_token : Option < String > , pub scope : Option < String > , pub dpop_jkt : Option < String > , pub created_at_utc : Option < DateTimeWithTimeZone > , pub updated_at_utc : Option < DateTimeWithTimeZone > , pub user_id : Option < Uuid > , pub handle : Option < String > , }

# [derive (Copy , Clone , Debug , EnumIter , DeriveColumn)] pub enum Column { Id , Did , AccessToken , TokenType , ExpiresAt , RefreshToken , Scope , DpopJkt , CreatedAtUtc , UpdatedAtUtc , UserId , Handle , }

# [derive (Copy , Clone , Debug , EnumIter , DerivePrimaryKey)] pub enum PrimaryKey { }

impl PrimaryKeyTrait for PrimaryKey { type ValueType = ; fn auto_increment () -> bool { false } }

# [derive (Copy , Clone , Debug , EnumIter)] pub enum Relation { }

impl ColumnTrait for Column { type EntityName = Entity ; fn def (& self) -> ColumnDef { match self { Self :: Id => ColumnType :: Uuid . def () . null () , Self :: Did => ColumnType :: Text . def () . null () , Self :: AccessToken => ColumnType :: Text . def () . null () , Self :: TokenType => ColumnType :: Text . def () . null () , Self :: ExpiresAt => ColumnType :: BigInteger . def () . null () , Self :: RefreshToken => ColumnType :: Text . def () . null () , Self :: Scope => ColumnType :: Text . def () . null () , Self :: DpopJkt => ColumnType :: Text . def () . null () , Self :: CreatedAtUtc => ColumnType :: TimestampWithTimeZone . def () . null () , Self :: UpdatedAtUtc => ColumnType :: TimestampWithTimeZone . def () . null () , Self :: UserId => ColumnType :: Uuid . def () . null () , Self :: Handle => ColumnType :: Text . def () . null () , } } }

impl RelationTrait for Relation { fn def (& self) -> RelationDef { panic ! ("No RelationDef") } }

impl ActiveModelBehavior for ActiveModel { }